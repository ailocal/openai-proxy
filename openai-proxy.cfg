# OpenAI API Proxy Configuration
# Install in: /etc/haproxy/conf.d/openai-proxy.cfg

frontend openai_proxy
    bind *:2020 v4v6
    mode http
    
    # Timeout settings
    timeout client 30s

    # Add custom request ID to all responses
    http-response set-header X-Request-ID %[unique-id]

    # Set required proxy headers
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-For %[src]

    # Health check endpoint
    acl path_health path /health
    http-request return status 200 content-type "text/plain" string "healthy" if path_health

    # Route based on path
    acl path_audio_transcriptions path_beg /v1/audio/transcriptions
    acl path_chat_completions path_beg /v1/chat/completions
    acl path_audio_speech path_beg /v1/audio/speech
    # Additional audio-related endpoints (some backends use these)
    acl path_audio_voices path_beg /v1/audio/voices
    acl path_models path_beg /v1/models
    acl path_v1 path_beg /v1

    # Welcome page for root and non-v1 paths
    acl path_root path /
    acl path_non_v1 path_reg ^/(?!v1)
    http-request return status 200 content-type "text/html" string "<!DOCTYPE html><html><head><title>Welcome to OpenAI-Proxy</title><style>body{font-family:sans-serif;max-width:800px;margin:40px auto;padding:0 20px}.endpoint{background:#f4f4f4;padding:10px;margin:10px 0;border-radius:4px}.title{color:#333}</style></head><body><h1>Welcome to OpenAI-Proxy</h1><p>Available API endpoints:</p><div class=\"endpoint\">/v1/audio/transcriptions - Audio transcription service</div><div class=\"endpoint\">/v1/chat/completions - Chat completions service</div><div class=\"endpoint\">/v1/audio/speech - Text to speech service</div><div class=\"endpoint\">/v1/* - All other OpenAI API endpoints</div></body></html>" if path_root or path_non_v1

    # Route to appropriate backends (uncomment the one you want to use)
    # Audio Transcriptions - Choose one of these
    # use_backend backend_transcriptions_openai if path_audio_transcriptions
    use_backend backend_transcriptions_ailocal if path_audio_transcriptions
    # use_backend backend_transcriptions_whisper if path_audio_transcriptions

    # Chat Completions - Choose one of these
    # use_backend backend_chat_openai if path_chat_completions
    use_backend backend_chat_ollama if path_chat_completions

    # Audio Speech - Choose one of these
    # use_backend backend_speech_openai if path_audio_speech
    use_backend backend_speech_local if path_audio_speech
    
    # Audio voices endpoint - route to same backend as speech
    # use_backend backend_speech_openai if path_audio_voices
    use_backend backend_speech_local if path_audio_voices
    
    # Models endpoint - can be routed to any capable backend
    # For most accurate model lists, route to backend_openai
    use_backend backend_openai if path_models

    # Default OpenAI API
    use_backend backend_openai if path_v1

# =============================
# TRANSCRIPTION BACKENDS
# =============================

# OpenAI Transcription Backend
backend backend_transcriptions_openai
    mode http
    option forwardfor

    # Add backend identifier to response
    http-response set-header X-Backend "transcriptions_openai"

    # Timeout settings
    timeout connect 10s
    timeout server 30s

    # OpenAI API Configuration
    http-request set-header Host api.openai.com
    http-request set-header Authorization %[req.hdr(Authorization)]
    http-request set-header Content-Type %[req.hdr(Content-Type)]
    server openai api.openai.com:443 ssl verify none sni str(api.openai.com)

# AILocal Public Whisper Backend
backend backend_transcriptions_ailocal
    mode http
    option forwardfor

    # Add backend identifier to response
    http-response set-header X-Backend "transcriptions_ailocal"

    # Timeout settings
    timeout connect 10s
    timeout server 30s

    # AILocal.org API Configuration 
    http-request set-header Host api.ailocal.org
    server whisper api.ailocal.org:443 ssl verify none sni str(api.ailocal.org)

# Local Whisper Backend
backend backend_transcriptions_whisper
    mode http
    option forwardfor

    # Add backend identifier to response
    http-response set-header X-Backend "transcriptions_whisper"

    # Timeout settings
    timeout connect 10s
    timeout server 30s

    # Local Whisper Configuration
    http-request set-header Host localhost
 
    # Rewrite to default innference path used by whisper.cpp
    #
    # This can be changed to default OpenAI API path with:
    #
    #   whisper-server --inference-path /v1/audio/transcriptions
    # 
    http-request set-path /inference if { path -m beg /v1/audio/transcriptions }
    server whisper localhost:2022

# =============================
# CHAT COMPLETION BACKENDS
# =============================

# OpenAI Chat Completions Backend
backend backend_chat_openai
    mode http
    option forwardfor
    
    # Add backend identifier to response
    http-response set-header X-Backend "chat_openai"
    
    # Timeout settings
    timeout connect 10s
    timeout server 30s
    
    # OpenAI API Configuration
    http-request set-header Host api.openai.com
    http-request set-header Authorization %[req.hdr(Authorization)]
    server openai api.openai.com:443 ssl verify none sni str(api.openai.com)

# Local Ollama Chat Completions Backend
backend backend_chat_ollama
    mode http
    option forwardfor
    
    # Add backend identifier to response
    http-response set-header X-Backend "chat_ollama"
    
    # Timeout settings
    timeout connect 10s
    timeout server 30s
    
    # Local Ollama Configuration
    http-request set-header Host localhost
    server ollama localhost:11434

# =============================
# SPEECH BACKENDS
# =============================

# OpenAI Speech Backend
backend backend_speech_openai
    mode http
    option forwardfor
    
    # Add backend identifier to response
    http-response set-header X-Backend "speech_openai"
    
    # Timeout settings
    timeout connect 10s
    timeout server 30s
    
    # OpenAI API Configuration
    http-request set-header Host api.openai.com
    http-request set-header Authorization %[req.hdr(Authorization)]
    server openai api.openai.com:443 ssl verify none sni str(api.openai.com)

# Local TTS Speech Backend
backend backend_speech_local
    mode http
    option forwardfor
    
    # Add backend identifier to response
    http-response set-header X-Backend "speech_local"
    
    # Timeout settings
    timeout connect 10s
    timeout server 30s
    
    # Local TTS Configuration
    http-request set-header Host localhost
    server tts localhost:8880

# =============================
# DEFAULT OPENAI BACKEND
# =============================

# Default OpenAI Backend for all other API endpoints
backend backend_openai
    mode http
    option forwardfor
    
    # Add backend identifier to response
    http-response set-header X-Backend "openai_default"
    
    # Timeout settings
    timeout connect 10s
    timeout server 30s
    
    # OpenAI API Configuration
    http-request set-header Host api.openai.com
    server openai api.openai.com:443 ssl verify none sni str(api.openai.com)
