#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit

# Color constants
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the real path of the script, following symlinks
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Ensure we're in the project root when running container commands
function ensure_project_root() {
    if ! cd "$PROJECT_ROOT"; then
        echo -e "${RED}Error: Could not change to project root directory: $PROJECT_ROOT${NC}" >&2
        exit 1
    fi
}

# Config paths
DEFAULT_CONFIG_PATH="/etc/haproxy/conf.d/openai-proxy.cfg"
EXAMPLE_CONFIG_PATH="config/haproxy/conf.d/openai-proxy.cfg-example"

function check_native_deps() {
    local missing_deps=()
    
    # Check for haproxy
    if ! command -v haproxy >/dev/null 2>&1; then
        missing_deps+=("haproxy")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${YELLOW}Missing dependencies for native mode: ${missing_deps[*]}${NC}"
        echo -ne "${BLUE}Would you like to install them? [Y/n] ${NC}"
        read -r response
        
        case "$response" in
            [nN][oO]|[nN])
                echo -e "${RED}Dependencies required to continue${NC}"
                exit 1
                ;;
            *)
                # Try to detect package manager and install
                if command -v apt-get >/dev/null 2>&1; then
                    sudo apt-get update && sudo apt-get install -y "${missing_deps[@]}"
                elif command -v dnf >/dev/null 2>&1; then
                    sudo dnf install -y "${missing_deps[@]}"
                elif command -v brew >/dev/null 2>&1; then
                    brew install "${missing_deps[@]}"
                else
                    echo -e "${RED}Could not detect package manager. Please install manually: ${missing_deps[*]}${NC}"
                    exit 1
                fi
                ;;
        esac
    fi
}

function check_container_deps() {
    local missing_deps=()
    
    # Check for podman and podman-compose
    if ! command -v podman >/dev/null 2>&1; then
        missing_deps+=("podman")
    fi
    if ! command -v podman-compose >/dev/null 2>&1; then
        missing_deps+=("podman-compose")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${YELLOW}Missing dependencies for container mode: ${missing_deps[*]}${NC}"
        echo -ne "${BLUE}Would you like to install them? [Y/n] ${NC}"
        read -r response
        
        case "$response" in
            [nN][oO]|[nN])
                echo -e "${RED}Dependencies required to continue${NC}"
                exit 1
                ;;
            *)
                # Try to detect package manager and install
                if command -v apt-get >/dev/null 2>&1; then
                    sudo apt-get update && sudo apt-get install -y "${missing_deps[@]}"
                elif command -v dnf >/dev/null 2>&1; then
                    sudo dnf install -y "${missing_deps[@]}"
                elif command -v brew >/dev/null 2>&1; then
                    brew install "${missing_deps[@]}"
                else
                    echo -e "${RED}Could not detect package manager. Please install manually: ${missing_deps[*]}${NC}"
                    exit 1
                fi
                ;;
        esac
    fi
}

function ensure_config() {
    local config_path="$1"
    
    # Check if config exists
    if [ ! -f "$config_path" ]; then
        echo -e "${YELLOW}Config file not found: $config_path${NC}"
        
        # Check if example config exists
        if [ -f "$EXAMPLE_CONFIG_PATH" ]; then
            echo -ne "${BLUE}Would you like to copy the example config? [Y/n] ${NC}"
            read -r response
            
            case "$response" in
                [nN][oO]|[nN])
                    echo -e "${RED}Config file required to continue${NC}"
                    exit 1
                    ;;
                *)
                    # Copy example config
                    cp "$EXAMPLE_CONFIG_PATH" "${EXAMPLE_CONFIG_PATH/-example}"
                    echo -e "${GREEN}Copied example config to: $config_path${NC}"
                    ;;
            esac
        else
            echo -e "${RED}Error: Example config not found: $EXAMPLE_CONFIG_PATH${NC}"
            exit 1
        fi
    fi
}

function show_help() {
    echo "Usage: openai-proxy <command> [options]"
    echo
    echo "Commands:"
    echo "  check-config        Check HAProxy configuration syntax"
    echo "  check-endpoints     Test the OpenAI API endpoints"
    echo
    echo "  start              Start HAProxy directly on the host"
    echo "  stop               Stop HAProxy on the host" 
    echo "  status             Show HAProxy status on the host"
    echo
    echo "  container          Manage container operations:"
    echo "    start             Start the proxy container"
    echo "    stop              Stop the proxy container"
    echo "    restart           Restart the proxy container"
    echo "    status            Show proxy container status"
    echo "    logs              Show container logs"
    echo "    exec              Connect to container shell"
    echo "    enable            Enable container auto-start with system"
    echo "    disable           Disable container auto-start with system"
    echo
    echo "Global Options:"
    echo "  -h, --help     Show this help message"
    echo "  -v, --verbose  Show detailed output"
}

function config_check() {
    local verbose=0
    local config_path="$DEFAULT_CONFIG_PATH"

    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                verbose=1
                shift
                ;;
            -h|--help)
                echo "Usage: openai-proxy config-check [OPTIONS] [CONFIG_PATH]"
                echo
                echo "Check HAProxy configuration syntax"
                echo
                echo "Options:"
                echo "  -h, --help     Show this help message"
                echo "  -v, --verbose  Show detailed output"
                echo
                echo "Default config path: $config_path"
                exit 0
                ;;
            *)
                if [ -f "$1" ]; then
                    config_path="$1"
                else
                    echo -e "${RED}Error: Config file not found: $1${NC}" >&2
                    exit 1
                fi
                shift
                ;;
        esac
    done

    # Check if haproxy is installed
    if ! command -v haproxy &> /dev/null; then
        echo -e "${RED}Error: haproxy is not installed${NC}" >&2
        exit 1
    fi

    # Ensure config file exists
    ensure_config "$config_path"

    echo -e "${YELLOW}Checking HAProxy configuration: $config_path${NC}"

    if [ "$verbose" -eq 1 ]; then
        if haproxy -c -V -f "$config_path"; then
            echo -e "${GREEN}Configuration is valid${NC}"
            exit 0
        else
            echo -e "${RED}Configuration check failed${NC}"
            exit 1
        fi
    else
        if haproxy -c -q -f "$config_path"; then
            echo -e "${GREEN}Configuration is valid${NC}"
            exit 0
        else
            echo -e "${RED}Configuration check failed${NC}"
            exit 1
        fi
    fi
}

function endpoints_check() {
    local verbose=0
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                verbose=1
                shift
                ;;
            -h|--help)
                echo "Usage: openai-proxy endpoints-check [OPTIONS]"
                echo
                echo "Test OpenAI API endpoints"
                echo
                echo "Options:"
                echo "  -h, --help     Show this help message"
                echo "  -v, --verbose  Show detailed output"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy endpoints-check [-v|--verbose]"
                exit 1
                ;;
        esac
    done

    # Check if OPENAI_API_KEY is set
    if [ -z "${OPENAI_API_KEY:-}" ]; then
        echo -e "${RED}Error: OPENAI_API_KEY environment variable is not set${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Testing OpenAI Proxy endpoints...${NC}"

    # Function to run curl with conditional verbose output
    run_curl_test() {
        local output
        local status
        
        if [ "$verbose" -eq 1 ]; then
            "$@"
            status=$?
        else
            output=$("$@" 2>&1)
            status=$?
            if [ $status -ne 0 ]; then
                echo -e "${RED}Error response:${NC}"
                echo "$output"
            fi
        fi
        return $status
    }

    # Test endpoints
    echo -e "\n${YELLOW}1. Testing /v1/audio/transcriptions...${NC}"
    if [ "$verbose" -eq 1 ]; then
        if run_curl_test curl -v -X POST \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: multipart/form-data" \
            -F file="@test/fixtures/huge-manatees.mp3" \
            -F model="whisper-1" \
            http://localhost:2020/v1/audio/transcriptions; then
            echo -e "${GREEN}✓ Audio transcription endpoint working${NC}"
        else
            echo -e "${RED}✗ Audio transcription failed${NC}"
        fi
    else
        if output=$(curl -s -X POST \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: multipart/form-data" \
            -F file="@test/fixtures/huge-manatees.mp3" \
            -F model="whisper-1" \
            http://localhost:2020/v1/audio/transcriptions); then
            echo -e "${GREEN}✓ Audio transcription endpoint working${NC}"
            echo -e "Response: ${YELLOW}$output${NC}"
        else
            echo -e "${RED}✗ Audio transcription failed${NC}"
        fi
    fi

    echo -e "\n${YELLOW}2. Testing /v1/chat/completions...${NC}"
    if run_curl_test curl ${verbose:+-v} -X POST \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": "Say hello!"}]
        }' \
        http://localhost:2020/v1/chat/completions; then
        echo -e "${GREEN}✓ Chat completions endpoint working${NC}"
    else
        echo -e "${RED}✗ Chat completions failed${NC}"
    fi

    echo -e "\n${YELLOW}3. Testing /v1/audio/speech...${NC}"
    if run_curl_test curl ${verbose:+-v} -X POST \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{
            "model": "tts-1",
            "input": "Hello world!",
            "voice": "alloy"
        }' \
        http://localhost:2020/v1/audio/speech -o test.mp3; then
        echo -e "${GREEN}✓ Audio speech endpoint working${NC}"
    else
        echo -e "${RED}✗ Audio speech failed${NC}"
    fi

    # Clean up
    rm -f test.mp3

    echo -e "\n${GREEN}Verification complete!${NC}"
}

function start() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy start [OPTIONS]"
                echo
                echo "Start HAProxy directly on the host"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy start"
                exit 1
                ;;
        esac
    done

    # Check dependencies before starting
    check_native_deps

    # Check if already running
    if pgrep -x haproxy >/dev/null; then
        echo -e "${YELLOW}HAProxy is already running${NC}"
        exit 0
    fi

    echo -e "${YELLOW}Starting HAProxy...${NC}"
    # Ensure config exists and run HAProxy in foreground mode
    ensure_config "$DEFAULT_CONFIG_PATH"
    haproxy -f "$DEFAULT_CONFIG_PATH" -d
    echo -e "${GREEN}HAProxy started${NC}"
}

function stop() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy stop [OPTIONS]"
                echo
                echo "Stop HAProxy on the host"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy stop"
                exit 1
                ;;
        esac
    done

    # Check dependencies before stopping
    check_native_deps

    echo -e "${YELLOW}Stopping HAProxy...${NC}"
    if pgrep -x haproxy >/dev/null; then
        pkill haproxy
        echo -e "${GREEN}HAProxy stopped${NC}"
    else
        echo -e "${YELLOW}HAProxy is not running${NC}"
    fi
}

function status() {
    local verbose=0
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                verbose=1
                shift
                ;;
            -h|--help)
                echo "Usage: openai-proxy status [OPTIONS]"
                echo
                echo "Show status of all HAProxy instances"
                echo
                echo "Options:"
                echo "  -h, --help     Show this help message"
                echo "  -v, --verbose  Show detailed output"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy status"
                exit 1
                ;;
        esac
    done

    # System HAProxy status
    echo -e "${YELLOW}System HAProxy:${NC}"
    if command -v systemctl >/dev/null 2>&1; then
        local is_enabled=$(systemctl is-enabled haproxy 2>/dev/null)
        local is_active=$(systemctl is-active haproxy 2>/dev/null)
        
        if [ "$verbose" -eq 1 ]; then
            systemctl status haproxy || true
        else
            if [ "$is_enabled" = "enabled" ]; then
                echo -e "  Service: ${GREEN}enabled${NC}"
            else
                echo -e "  Service: ${RED}disabled${NC}"
            fi
            
            if [ "$is_active" = "active" ]; then
                echo -e "  Status:  ${GREEN}running${NC}"
            else
                echo -e "  Status:  ${RED}not running${NC}"
            fi
        fi
    elif command -v launchctl >/dev/null 2>&1; then
        if [ "$verbose" -eq 1 ]; then
            sudo launchctl list | grep haproxy || true
        else
            if sudo launchctl list | grep -q haproxy; then
                echo -e "  Status: ${GREEN}running${NC}"
            else
                echo -e "  Status: ${RED}not running${NC}"
            fi
        fi
    else
        echo "  No system service manager found"
    fi

    # Container HAProxy status
    echo -e "\n${YELLOW}Container HAProxy:${NC}"
    if [ "$verbose" -eq 1 ]; then
        podman-compose ps
    else
        SHOW_STATUS=1 container_status
    fi

    if [ "$verbose" -eq 0 ]; then
        echo -e "\nTip: Use ${YELLOW}-v${NC} or ${YELLOW}--verbose${NC} for detailed status information"
    fi
}

function container_start() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy container start [OPTIONS]"
                echo
                echo "Start the proxy container"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy container start"
                exit 1
                ;;
        esac
    done

    # Check dependencies before starting
    check_container_deps
    
    # Ensure we're in the project root
    ensure_project_root

    # Check if container is already running
    if podman-compose ps 2>/dev/null | grep -q "openai-proxy.*Up"; then
        echo -e "${YELLOW}Container is already running${NC}"
        podman-compose ps
        exit 0
    fi

    echo -e "${YELLOW}Starting proxy container...${NC}"
    
    # Try to start with podman-compose
    if ! output=$(podman-compose up -d 2>&1); then
        # If there's an error about container already existing
        if echo "$output" | grep -q "already in use"; then
            echo -e "${YELLOW}Container exists but not running. Cleaning up...${NC}"
            podman-compose down
            echo -e "${YELLOW}Retrying container start...${NC}"
            if ! podman-compose up -d; then
                echo -e "${RED}Failed to start proxy container${NC}"
                exit 1
            fi
        else
            echo -e "${RED}Failed to start proxy container:${NC}"
            echo "$output"
            exit 1
        fi
    fi

    # Wait for container to be ready (up to 30 seconds)
    echo -e "${YELLOW}Waiting for container to be ready...${NC}"
    for i in {1..6}; do
        if nc -z localhost 2020; then
            echo -e "${GREEN}Proxy container started and listening on port 2020${NC}"
            podman-compose ps
            exit 0
        fi
        echo -e "${YELLOW}Still waiting for port 2020... (attempt $i/6)${NC}"
        sleep 5
    done

    echo -e "${RED}Container started but not responding${NC}"
    echo -e "${YELLOW}Debug information:${NC}"
    echo -e "Container logs:"
    podman logs openai-proxy
    echo -e "\nContainer status:"
    podman-compose ps
    exit 1
}

function container_stop() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy container stop [OPTIONS]"
                echo
                echo "Stop the proxy container"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy container stop"
                exit 1
                ;;
        esac
    done

    # Check dependencies before stopping
    check_container_deps
    
    # Ensure we're in the project root
    ensure_project_root

    echo -e "${YELLOW}Stopping proxy container...${NC}"

    # Check if running as a service
    local service_stopped=0
    if command -v systemctl >/dev/null 2>&1; then
        if systemctl --user is-active openai-proxy.service >/dev/null 2>&1; then
            echo -e "${YELLOW}Stopping systemd service...${NC}"
            systemctl --user stop openai-proxy.service
            service_stopped=1
        fi
    elif command -v brew >/dev/null 2>&1; then
        if brew services list | grep -q "haproxy.*started"; then
            echo -e "${YELLOW}Stopping brew service...${NC}"
            brew services stop haproxy
            service_stopped=1
        fi
    fi

    # If service wasn't stopped, try podman-compose
    if [ "$service_stopped" -eq 0 ]; then
        if podman-compose ps 2>/dev/null | grep -q "openai-proxy"; then
            echo -e "${YELLOW}Stopping and removing container with podman-compose...${NC}"
            podman-compose down -v
        else
            echo -e "${YELLOW}No running container found${NC}"
            exit 0
        fi
    fi

    echo -e "${GREEN}Proxy container stopped${NC}"
}

# Returns:
# 0 - container is running
# 1 - container is not running
# Outputs status message if SHOW_STATUS is set
function container_status() {
    if podman-compose ps 2>/dev/null | grep -q "openai-proxy"; then
        local health=$(podman-compose ps | grep openai-proxy | grep -o '(.*)')
        if [ "${SHOW_STATUS:-0}" -eq 1 ]; then
            if [[ $health == "(healthy)" ]]; then
                echo -e "  Status: ${GREEN}running (healthy)${NC}"
            elif [[ $health == "(unhealthy)" ]]; then
                echo -e "  Status: ${RED}running (unhealthy)${NC}"
            else
                echo -e "  Status: ${YELLOW}running${NC}"
            fi
        fi
        return 0
    else
        if [ "${SHOW_STATUS:-0}" -eq 1 ]; then
            echo -e "  Status: ${RED}not running${NC}"
        fi
        return 1
    fi
}

function container_status_command() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy container-status [OPTIONS]"
                echo
                echo "Show proxy container status"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy container-status"
                exit 1
                ;;
        esac
    done

    # Ensure we're in the project root
    ensure_project_root

    echo -e "${YELLOW}Container status:${NC}"
    podman-compose ps
}

function container_enable() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy enable-container [OPTIONS]"
                echo
                echo "Enable the proxy container to start automatically with the system"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy enable-container"
                exit 1
                ;;
        esac
    done

    # Check dependencies
    check_container_deps
    
    # Ensure we're in the project root
    ensure_project_root

    echo -e "${YELLOW}Enabling proxy container auto-start...${NC}"
    
    if command -v systemctl >/dev/null 2>&1; then
        # Linux with systemd
        # Create systemd user directory if it doesn't exist
        mkdir -p ~/.config/systemd/user/

        # Create the systemd service file
        cat > ~/.config/systemd/user/openai-proxy.service << EOF
[Unit]
Description=OpenAI Proxy Container Service
After=network.target

[Service]
Type=simple
WorkingDirectory=$(pwd)
ExecStart=/usr/bin/podman-compose up
ExecStop=/usr/bin/podman-compose down
Restart=always

[Install]
WantedBy=default.target
EOF

        # Reload systemd user daemon
        systemctl --user daemon-reload

        # Enable and start the service
        systemctl --user enable openai-proxy.service
        systemctl --user start openai-proxy.service
        
        echo -e "${GREEN}Proxy container enabled to start automatically (systemd)${NC}"
        echo -e "${YELLOW}Note: The service will start after you log in, as it's enabled in user mode${NC}"
    elif command -v brew >/dev/null 2>&1; then
        # macOS with brew services
        mkdir -p "$HOME/.config/haproxy/conf.d"
        ln -sf "$(pwd)/config/haproxy/conf.d/openai-proxy.cfg" "$HOME/.config/haproxy/conf.d/"
        brew services start haproxy
        echo -e "${GREEN}Proxy container enabled to start automatically (brew services)${NC}"
    else
        echo -e "${RED}Error: No supported service manager (systemd/brew) found${NC}"
        exit 1
    fi
}

function container_restart() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy container restart [OPTIONS]"
                echo
                echo "Restart the proxy container"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy container restart"
                exit 1
                ;;
        esac
    done

    # Check dependencies before restarting
    check_container_deps
    
    # Ensure we're in the project root
    ensure_project_root

    echo -e "${YELLOW}Restarting proxy container...${NC}"
    container_stop
    container_start
}

function container_logs() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--follow)
                FOLLOW=1
                shift
                ;;
            -h|--help)
                echo "Usage: openai-proxy container logs [OPTIONS]"
                echo
                echo "Show proxy container logs"
                echo
                echo "Options:"
                echo "  -h, --help    Show this help message"
                echo "  -f, --follow  Follow log output"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy container logs [-f|--follow]"
                exit 1
                ;;
        esac
    done

    # Check dependencies before showing logs
    check_container_deps
    
    # Ensure we're in the project root
    ensure_project_root

    if [ "${FOLLOW:-0}" -eq 1 ]; then
        podman logs -f openai-proxy
    else
        podman logs openai-proxy
    fi
}

function container_exec() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy container exec [OPTIONS] [COMMAND]"
                echo
                echo "Connect to container shell or run command"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                echo
                echo "If no command is provided, opens an interactive shell"
                exit 0
                ;;
            *)
                break
                ;;
        esac
    done

    # Check dependencies before connecting
    check_container_deps
    
    # Ensure we're in the project root
    ensure_project_root

    # Check if container is running
    if ! container_status; then
        echo -e "${RED}Container is not running${NC}"
        exit 1
    fi

    if [ $# -eq 0 ]; then
        echo -e "${YELLOW}Connecting to container shell...${NC}"
        podman exec -it openai-proxy sh
    elif [ "$1" = "wget" ] && [[ "$*" =~ "localhost:" ]]; then
        # Replace localhost with 127.0.0.1 for wget commands
        modified_cmd="${@/localhost:/127.0.0.1:}"
        podman exec openai-proxy $modified_cmd
    else
        podman exec openai-proxy "$@"
    fi
}

function container_disable() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Usage: openai-proxy disable-container [OPTIONS]"
                echo
                echo "Disable automatic startup of the proxy container"
                echo
                echo "Options:"
                echo "  -h, --help  Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Usage: openai-proxy disable-container"
                exit 1
                ;;
        esac
    done

    # Check dependencies
    check_container_deps
    
    # Ensure we're in the project root
    ensure_project_root

    echo -e "${YELLOW}Disabling proxy container auto-start...${NC}"
    
    if command -v systemctl >/dev/null 2>&1; then
        # Linux with systemd
        systemctl --user stop openai-proxy.service
        systemctl --user disable openai-proxy.service
        rm -f ~/.config/systemd/user/openai-proxy.service
        systemctl --user daemon-reload
        echo -e "${GREEN}Proxy container auto-start disabled (systemd)${NC}"
    elif command -v brew >/dev/null 2>&1; then
        # macOS with brew services
        brew services stop haproxy
        rm -f "$HOME/.config/haproxy/conf.d/openai-proxy.cfg"
        echo -e "${GREEN}Proxy container auto-start disabled (brew services)${NC}"
    else
        echo -e "${RED}Error: No supported service manager (systemd/brew) found${NC}"
        exit 1
    fi
}

# Main command processing
case "${1:-}" in
    container)
        shift
        case "${1:-}" in
            start)
                shift
                container_start "$@"
                ;;
            stop)
                shift
                container_stop "$@"
                ;;
            status)
                shift
                container_status_command "$@"
                ;;
            enable)
                shift
                container_enable "$@"
                ;;
            restart)
                shift
                container_restart "$@"
                ;;
            logs)
                shift
                container_logs "$@"
                ;;
            exec)
                shift
                container_exec "$@"
                ;;
            disable)
                shift
                container_disable "$@"
                ;;
            "")
                echo "Error: No container command specified"
                show_help
                exit 1
                ;;
            *)
                echo "Error: Unknown container command: $1"
                show_help
                exit 1
                ;;
        esac
        ;;
    check-config)
        shift
        config_check "$@"
        ;;
    check-endpoints)
        shift
        endpoints_check "$@"
        ;;
    start)
        shift
        start "$@"
        ;;
    stop)
        shift
        stop "$@"
        ;;
    status)
        shift
        status "$@"
        ;;
    -h|--help)
        show_help
        exit 0
        ;;
    "")
        echo "Error: No command specified"
        show_help
        exit 1
        ;;
    *)
        echo "Error: Unknown command: $1"
        show_help
        exit 1
        ;;
esac
