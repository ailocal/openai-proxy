#!/bin/bash

set -e

# Function to detect the OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
        elif [ -f /etc/redhat-release ]; then
            OS="RedHat"
        else
            OS="Unknown Linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macOS"
    else
        OS="Unknown"
    fi
    echo $OS
}

# Function to install packages
install_packages() {
    case $1 in
        "Ubuntu"|"Debian")
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip ffmpeg
            ;;
        "Fedora"|"RedHat")
            sudo dnf install -y python3 python3-pip ffmpeg
            ;;
        "macOS")
            brew install python3 ffmpeg
            ;;
        *)
            echo "Unsupported OS for automatic package installation"
            exit 1
            ;;
    esac
}

# Detect the OS
OS=$(detect_os)
echo "Detected OS: $OS"

# Install required packages
install_packages $OS

# Set variables
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SERVICE_NAME="ailocal-proxy"
SERVICE_FILE="${SCRIPT_DIR}/../config/systemd/${SERVICE_NAME}.service"
LAUNCHD_PLIST_FILE="${SCRIPT_DIR}/../config/launchd/com.ailocal.proxy.plist"
BIN_FILE="${SCRIPT_DIR}/${SERVICE_NAME}"
LAUNCH_AGENTS_DIR="$HOME/Library/LaunchAgents"
PLIST_NAME="com.ailocal.proxy.plist"

# Function to check if a file exists
check_file_exists() {
    if [ ! -f "$1" ]; then
        echo "Error: File $1 not found."
        exit 1
    fi
}


# Install Python dependencies
if ! pip3 install --user pydub; then
    echo "Error: Failed to install Python dependencies."
    exit 1
fi

if [[ "$OS" == "macOS" ]]; then
    # Create directories if they don't exist
    mkdir -p /usr/local/bin "${LAUNCH_AGENTS_DIR}" || { echo "Error: Failed to create directories."; exit 1; }

    # Check if required files exist
    check_file_exists "${BIN_FILE}"
    check_file_exists "${LAUNCHD_PLIST_FILE}"

    # Copy binary file
    if ! sudo cp "${BIN_FILE}" "/usr/local/bin/${SERVICE_NAME}"; then
        echo "Error: Failed to copy binary file."
        exit 1
    fi
    sudo chmod +x "/usr/local/bin/${SERVICE_NAME}" || { echo "Error: Failed to set execute permissions."; exit 1; }

    # Copy and load the LaunchAgent
    cp "${LAUNCHD_PLIST_FILE}" "${LAUNCH_AGENTS_DIR}/${PLIST_NAME}" || { echo "Error: Failed to copy plist file."; exit 1; }
    
    # Unload the agent if it's already loaded
    launchctl unload "${LAUNCH_AGENTS_DIR}/${PLIST_NAME}" 2>/dev/null || true
    
    # Load the agent
    if launchctl load "${LAUNCH_AGENTS_DIR}/${PLIST_NAME}"; then
        echo "AILocal Proxy LaunchAgent installed and started successfully."
    else
        echo "Error: Failed to load the LaunchAgent. Installation aborted."
        exit 1
    fi

    echo "Installation complete. AILocal Proxy is now running as a LaunchAgent."
    echo "You can check its status with: launchctl list | grep ailocal"
else
    # Create directories if they don't exist
    sudo mkdir -p /usr/local/bin /usr/lib/systemd/system || { echo "Error: Failed to create directories."; exit 1; }

    # Check if binary file exists
    check_file_exists "${BIN_FILE}"

    # Copy binary file
    if ! sudo cp "${BIN_FILE}" "/usr/local/bin/${SERVICE_NAME}"; then
        echo "Error: Failed to copy binary file."
        exit 1
    fi
    sudo chmod +x "/usr/local/bin/${SERVICE_NAME}" || { echo "Error: Failed to set execute permissions."; exit 1; }

    # Check if service file exists
    check_file_exists "${SERVICE_FILE}"

    # Copy service file
    if sudo cp "${SYSTEMD_SERVICE_FILE}" "/usr/lib/systemd/system/${SERVICE_NAME}.service"; then
        echo "Service file copied successfully."
    else
        echo "Error: Failed to copy service file. Installation aborted."
        exit 1
    fi

    # Reload systemd
    if sudo systemctl daemon-reload; then
        echo "Systemd reloaded successfully."
    else
        echo "Error: Failed to reload systemd. Installation aborted."
        exit 1
    fi

    # Enable and start the service
    if sudo systemctl enable ${SERVICE_NAME} && sudo systemctl restart ${SERVICE_NAME}; then
        echo "AILocal Proxy service enabled and started successfully."
    else
        echo "Error: Failed to enable or start the service. Installation aborted."
        exit 1
    fi

    echo "Installation complete. AILocal Proxy service is now running."
    echo "You can check its status with: sudo systemctl status ${SERVICE_NAME}"
fi

echo "Installation complete."
