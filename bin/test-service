#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit

# Color constants
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Default port for OpenAI proxy
PORT=${OPENAI_PROXY_PORT:-2020}
BASE_URL="http://localhost:${PORT}"

# Test audio file path - using the same one from E2E tests
SCRIPT_DIR="$(dirname -- "$(realpath "${BASH_SOURCE[0]}")")"
AUDIO_FILE="${SCRIPT_DIR}/../test/fixtures/for-the-benefit-of-all-huge-manatees.mp3"

function show_help() {
    echo "Usage: test-service [OPTIONS]"
    echo
    echo "Test the running OpenAI proxy service"
    echo
    echo "Options:"
    echo "  -h, --help     Show this help message and exit"
    echo "  -p, --port     Specify port (default: $PORT)"
    echo "  -v, --verbose  Show detailed output"
}

# Process command line arguments
VERBOSE=0

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -p|--port)
            PORT="$2"
            BASE_URL="http://localhost:${PORT}"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        *)
            echo "Unknown option: $1" >&2
            show_help
            exit 1
            ;;
    esac
done

# Test chat completions
function test_chat_completions() {
    echo -e "${YELLOW}Testing chat completions...${NC}"
    
    local response
    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d '{"model":"llama2","messages":[{"role":"user","content":"Say hello"}]}' \
        "${BASE_URL}/v1/chat/completions")
    
    if [ "$VERBOSE" -eq 1 ]; then
        echo "Response: $response"
    fi
    
    if [[ "$response" =~ "content" ]]; then
        echo -e "${GREEN}✓ Chat completions working${NC}"
        return 0
    else
        echo -e "${RED}✗ Chat completions failed${NC}"
        return 1
    fi
}

# Test audio transcription
function test_transcription() {
    echo -e "${YELLOW}Testing audio transcription...${NC}"
    
    if [ ! -f "$AUDIO_FILE" ]; then
        echo -e "${RED}✗ Test audio file not found: $AUDIO_FILE${NC}"
        return 1
    fi
    
    local response
    response=$(curl -s -X POST \
        -H "Content-Type: multipart/form-data" \
        -F "file=@$AUDIO_FILE" \
        "${BASE_URL}/v1/audio/transcriptions")
    
    if [ "$VERBOSE" -eq 1 ]; then
        echo "Response: $response"
    fi
    
    if [[ "$response" =~ "text" ]]; then
        echo -e "${GREEN}✓ Audio transcription working${NC}"
        return 0
    else
        echo -e "${RED}✗ Audio transcription failed${NC}"
        return 1
    fi
}

# Test text to speech
function test_text_to_speech() {
    echo -e "${YELLOW}Testing text to speech...${NC}"
    
    local response
    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d '{"input":"Hello world","voice":"alloy"}' \
        "${BASE_URL}/v1/audio/speech")
    
    if [ "$VERBOSE" -eq 1 ]; then
        echo "Response length: ${#response}"
    fi
    
    if [ "${#response}" -gt 200 ]; then
        echo -e "${GREEN}✓ Text to speech working${NC}"
        return 0
    else
        echo -e "${RED}✗ Text to speech failed${NC}"
        return 1
    fi
}

# Run all tests
echo -e "Testing OpenAI proxy at ${YELLOW}${BASE_URL}${NC}\n"

failures=0

test_chat_completions || ((failures++))
echo
test_transcription || ((failures++))
echo
test_text_to_speech || ((failures++))
echo

if [ "$failures" -eq 0 ]; then
    echo -e "${GREEN}All tests passed!${NC}"
    exit 0
else
    echo -e "${RED}${failures} test(s) failed${NC}"
    exit 1
fi
